package algorithm;

public class LinkedList {
	Node head;
	
	static class Node{//inner class 
		//inner class는 default가 static 이다. 
		int data;
		Node next;
		Node(int d){
			data = d;
			next = null;
		}
	}
	
	public static LinkedList insert(LinkedList list, int data) {
		Node new_node = new Node(data);
		new_node.next = null;
		
		if(list.head == null)//head가 empty 일 때 새로운 node를 head로 할당한다. 
		{
			list.head = new_node;
		}else {//head가 있으면 마지막 노드까지 traverse 한다. 그 후 마지막 노드의 next에 new_node를 할당한다. 
			Node last = list.head;
			while(last.next != null) {
				last = last.next;
			}
			last.next = new_node;
		}
		return list;	
	}
	
	public static void printList(LinkedList list) {
		Node currNode = list.head;
		System.out.println("LinkedList : ");
		
		while(currNode != null) {
			System.out.println(currNode.data + "");
			currNode = currNode.next;
		}
	}
	public static void deleteByKey(LinkedList list, int key)
	public static void main(String[] args) {
		LinkedList linkedList = new LinkedList();
		
		linkedList = insert(linkedList, 3);
		
		
		printList(linkedList);
	}

}
