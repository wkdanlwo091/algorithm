package algorithm;

import java.util.Scanner;

public class BOJ_14889 {
	static int arr[];
	static int visit[];
	static int N;
	static int map[][];

	public static void perm(int[] arr, int depth, int n, int k) {
		if (depth == k) {
			print(arr, k);
			return;
		}
		for (int i = depth; i < n; i++) {
			swap(arr, i, depth);
			perm(arr, depth + 1, n, k);
			swap(arr, i, depth);
		}
	}

	public static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	public static void print(int[] arr, int k) {
		for (int i = 0; i < k; i++) {
			if (i == k - 1)
				System.out.println(arr[i]);
			else
				System.out.print(arr[i] + ",");
		}
	}

	static void dfs(int cnt, int curr) {
		
		if (cnt == N/2) {
			for(int i = 0 ; i< N/2;i++) {
				System.out.print(arr[i] + " ");
			}
			System.out.println();
			return;
		}

		for (int i = 0; i < N; i++) {
			if (visit[i] == 0 && curr < i+1) {
				visit[i] = 1;
				arr[cnt] = i+1;
				dfs(cnt + 1, arr[cnt]);
				visit[i] = 0;
			}
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);

		N = scan.nextInt();
		visit = new int[N];
		arr = new int[N];
		map = new int[N][N];

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				map[i][j] = scan.nextInt();
			}
		}
		
		dfs(0,);
	}
}
