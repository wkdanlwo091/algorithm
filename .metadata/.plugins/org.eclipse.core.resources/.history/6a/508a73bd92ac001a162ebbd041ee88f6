package algorithm;

import java.util.Queue;
import java.util.Scanner;
import java.util.LinkedList;

public class BOJ_14502 {
	
	static int[][] map;
	static int[][] visit;
	static int N, M;
	static int []xAt = {1,-1,0,0};
	static int []yAt = {0,0,1,-1};
	static int maxAnswer = -100;
	
	public static void bfs() {
		Queue<Integer> q = new LinkedList<Integer>();

	}
	public static void dfs(int y, int x, int wall) {
		if(wall == 3) {//벽 세개 일 때 bfs 검사 
			bfs();
			return;
		}
		visit[y][x] = 1;
		
		map[y][x] = 1;
		for(int i = 0 ;i< 4;i++) {
			int nextY = y + yAt[i];
			int nextX = x + xAt[i];
			if(nextY <= N && nextY >= 0  && nextX <= M && nextX >=0 && )
			dfs(nextY, nextX, wall+1);
		}
		
		map[y][x] = 0;
		for(int i = 0 ;i< 4;i++) {
			int nextY = y + yAt[i];
			int nextX = x + xAt[i];
			dfs(nextY, nextX, wall);
		}
		
		
		visit[y][x] = 0;// 다 끝나고 안 방문한 케이스를 위해서 변경 
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		N = scan.nextInt();
		M = scan.nextInt();
		
		map = new int[N][M];
		visit = new int[N][M];
		
		for(int i = 0 ;i < N;i++) {
			for(int j = 0;j < M;j++) {
				map[i][j] = scan.nextInt();
			}
		}
		dfs(0,0,0);
	}
}
//dfs --> 미로를 탐색할 때 한 방향으로 가다가 더이상 갈 수 없으면
//가장 가까운 갈림길로 돌아와서 이 곳으로 부터 다른 방향으로 다시 탐색
//depth first search : 넓게 보다 depth있게 검색
//사용하는 경우 : 모든 노드를 방문하고자 할 때 이이 방법을 선택한다.
//
