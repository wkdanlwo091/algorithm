package algorithm;

import java.util.Scanner;

class myDfs{
	int visit[][];
	public myDfs(int N,int M) {
		visit = new int[N][M];
	}
	public void dfs() {
		
	}
}


public class BOJ_14502 {
	
	static int[][] map;
	static boolean[][] visit;
	static int N, M;
	
	public static void dfs() {
		
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		N = scan.nextInt();
		M = scan.nextInt();
		
		map = new int[N][M];
		myDfs dfs = new myDfs(N, M);
		
		
		for(int i = 0 ;i < N;i++) {
			for(int j = 0;j < M;j++) {
				
			}
		}
	}
}
//dfs --> 미로를 탐색할 때 한 방향으로 가다가 더이상 갈 수 없으면
//가장 가까운 갈림길로 돌아와서 이 곳으로 부터 다른 방향으로 다시 탐색
//depth first search : 넓게 보다 depth있게 검색
//사용하는 경우 : 모든 노드를 방문하고자 할 때 이이 방법을 선택한다.
//
