package algorithm;

public class LinkedList {
	Node head;
	
	static class Node{//inner class 
		//inner class는 default가 static 이다. 
		int data;
		Node next;
		Node(int d){
			data = d;
			next = null;
		}
	}
	
	public static LinkedList insert(LinkedList list, int data) {
		Node new_node = new Node(data);
		new_node.next = null;
		
		if(list.head == null)//head가 empty 일 때 새로운 node를 head로 할당한다. 
		{
			list.head = new_node;
		}else {//head가 있으면 마지막 노드까지 traverse 한다. 그 후 마지막 노드의 next에 new_node를 할당한다. 
			Node last = list.head;//node last는 list.head 즉 첫번째 노드를 가리킨다. 
			while(last.next != null) {
				last = last.next;//last는 다음 노드로 넘어간다. 
			}
			last.next = new_node;//마지막 노드의 next에 new_node를 할당한다. 
		}
		return list;	
	}
	
	public static void printList(LinkedList list) {
		Node currNode = list.head;
		System.out.println("LinkedList : ");
		
		while(currNode != null) {
			System.out.println(currNode.data + "");
			currNode = currNode.next;
		}
	}
	public static LinkedList deleteByKey(LinkedList list, int key) {
		Node currNode = list.head;
		Node prev = null;
		//키 값이 헤드에 있을 때
		if(currNode.data == key) {
			list.head = currNode.next;//헤드를 현재노드의 다음으로 옮긴다. 
			return list;
		}
		
		//키값이 헤드가 아닌 곳에 있을 때
		while(currNode != null && currNode.data != key) {
			prev = currNode;
			currNode = currNode.next;
		}
		//키값이 있을 때 
		
		if(currNode != null) {//garbage collector가 unreferenced된 메모리를 수거한다. 
			System.out.println("found key and deleted");
			prev.next = currNode.next;
		}
	
		//키값이 없을 때 
		
		if(currNode == null) {
			System.out.println("key not found");
		}
		
		return list;
	}
	
	public static void deleteByPosition(LinkedList list, int position) {
		Node currNode = list.head;
		Node prev = null;
		
		int idx = 0;
		if(position == 0) {
			if(currNode != null) {
				list.head = currNode.next;
			}
		}else {
			while(currNode != null) {
				if(idx == position) {
					prev.next = currNode.next;
					break;
				}
				prev = currNode;
				currNode = currNode.next;
				idx++;
			}
		}
	}
	
	
	public static void main(String[] args) {
		LinkedList linkedList = new LinkedList();
		
		linkedList = insert(linkedList, 3);
		linkedList = insert(linkedList, 4);
		linkedList = insert(linkedList, 5);
		linkedList = insert(linkedList, 6);
		linkedList = insert(linkedList, 7);
		linkedList = insert(linkedList, 8);
		
		linkedList = deleteByKey(linkedList, 5);
		
		printList(linkedList);
	
	}

}
