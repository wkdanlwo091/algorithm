package algorithm;

import java.util.Scanner;

public class BOJ_14502 {
	
	static int[][] map;
	static int[][] visit;
	static int N, M;
	static int []xAt = {1,-1,0,0};
	static int []yAt = {0,0,1,-1};
	
	public static void dfs(int y, int x, int wall) {
		visit[y][x] = 1;//방문 표시한다. 
		
		if(map[y][x] == 0) {
			map[y][x] =1;//벽세웠다. wall 이 2일 때 끝난 것이다. 
			if(wall != 2) {//벽 
				for(int i = 0 ;i< 4;i++) {//상하좌우 검색 
					int nextY = yAt[i] + y;
					int nextX = xAt[i] + x;
					if(nextY >=0 && nextY < N && nextX >= 0 && nextX < M && visit[nextY][nextX] == 0) {
						dfs(nextY, nextX, wall+1);
					}
				}

			}else if(wall == 2){
			}
			map[y][x] = 0;
			for(int i = 0 ;i< 4;i++) {//상하좌우 검색 
				int nextY = yAt[i] + y;
				int nextX = xAt[i] + x;
				if(nextY >=0 && nextY < N && nextX >= 0 && nextX < M && visit[nextY][nextX] == 0) {
					dfs(nextY, nextX, wall);
				}
			}
		}
		
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		N = scan.nextInt();
		M = scan.nextInt();
		
		map = new int[N][M];
		visit = new int[N][M];
		
		for(int i = 0 ;i < N;i++) {
			for(int j = 0;j < M;j++) {
				map[i][j] = scan.nextInt();
			}
		}
		dfs(0,0,0);
	}
}
//dfs --> 미로를 탐색할 때 한 방향으로 가다가 더이상 갈 수 없으면
//가장 가까운 갈림길로 돌아와서 이 곳으로 부터 다른 방향으로 다시 탐색
//depth first search : 넓게 보다 depth있게 검색
//사용하는 경우 : 모든 노드를 방문하고자 할 때 이이 방법을 선택한다.
//
